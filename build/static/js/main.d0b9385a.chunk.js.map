{"version":3,"sources":["pages/PostForm.jsx","pages/Post.jsx","pages/EditPostForm.jsx","pages/AllPost.jsx","App.js","serviceWorker.js","reducers/postReducer.js","index.js"],"names":["connect","props","useState","title","setTitle","post","setPost","required","type","placeholder","onChange","e","target","value","rows","cols","onClick","data","id","Date","editing","dispatch","console","log","newTitle","newPost","state","posts","map","key","App","Boolean","window","location","hostname","match","postReducer","action","concat","filter","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d0b9385a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {connect} from 'react-redux'\n\nconst PostForm = (props) => {\n    const [title,setTitle] = useState('')\n    const [post,setPost] = useState('')\n\n    const handleSubmit = () => {\n        const data = {\n            id : new Date(),\n            title: title,\n            post: post,\n            editing: false\n        }\n\n        //console.log(data)\n\n        props.dispatch({\n            type : 'ADD_POST', data\n        })\n\n        setTitle('')\n        setPost('')\n    }\n\n    return (\n        <div>\n            <h1>Create Post</h1>\n            <div>\n                <input required type=\"text\" placeholder=\"Enter Post Title\" onChange={(e) => setTitle(e.target.value)} value={title} /><br /><br />\n                <textarea required rows=\"5\" cols=\"28\" placeholder=\"Enter Post\" onChange={(e) => setPost(e.target.value)}  value={post} /><br /><br />\n                <button onClick={handleSubmit}>Post</button>\n            </div>\n        </div>\n    );\n\n}\nexport default connect()(PostForm);","import React, { useState } from 'react';\nimport {connect} from 'react-redux'\n\nconst Post = (props) => {\n    console.log(props)\n  return (\n    <div>\n      <h2>{props.post.title}</h2>\n      <p>{props.post.post}</p>\n      <button\n       onClick={() => props.dispatch({\n        type: 'EDIT_POST',\n        id: props.post.id\n    })}\n    >Edit</button>\n      <button\n        onClick={() => props.dispatch({\n            type: 'DELETE_POST',\n            id: props.post.id\n        })}\n      >Delete</button>\n    </div>\n  );\n }\n\nexport default connect()(Post);","import React, { useState } from 'react';\nimport {connect} from 'react-redux'\n\nconst EditPostForm = (props) => {\n    const [title,setTitle] = useState(props.post.title)\n    const [post,setPost] = useState(props.post.post)\n\n    const handleUpdate = () => {\n        const data = {\n            newTitle: title,\n            newPost: post,\n        }\n\n\n        props.dispatch({\n            type : 'UPDATE_POST',id: props.post.id ,data: data\n        })\n\n        setTitle(props.post.title)\n        setPost(props.post.post)\n    }\n\n    return (\n        <div>\n            <div>\n                <input required type=\"text\" placeholder=\"Enter Post Title\" onChange={(e) => setTitle(e.target.value)} value={title} /><br /><br />\n                <textarea required rows=\"5\" cols=\"28\" placeholder=\"Enter Post\" onChange={(e) => setPost(e.target.value)}  value={post} /><br /><br />\n                <button onClick={handleUpdate}>Update</button>\n            </div>\n        </div>\n    );\n\n}\nexport default connect()(EditPostForm);","import React from 'react';\nimport {connect} from 'react-redux'\nimport Post from './Post'\nimport EditPostForm from './EditPostForm'\nconst AllPost = (props) => {\n    return (\n        <div>\n            <h1>All Posts</h1>\n            {props.posts.map((post) => (\n                <div key={post.id} >\n                    {post.editing ? <EditPostForm post = {post} id={post.id} /> : <Post  post = {post} id={post.id}/> }\n                </div>\n            ))}\n\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        posts : state\n    }\n}\n\nexport default connect(mapStateToProps)(AllPost);","import React from 'react';\nimport PostForm from './pages/PostForm'\nimport AllPost from './pages/AllPost'\n\nconst  App = () => {\n\n  return (\n    <div>\n      <h1>Redux CRUD</h1>\n      <PostForm />\n      <AllPost />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nconst postReducer = (state = [], action) => {\n    switch(action.type) {\n        case 'ADD_POST' : \n            return state.concat([action.data])\n        case 'DELETE_POST': \n            return state.filter((post) => post.id !== action.id)\n        case 'EDIT_POST':\n            return state.map((post) => post.id === action.id ? {...post,editing :!post.editing } : post )\n        case 'UPDATE_POST':\n            return state.map((post) => {\n                if (post.id === action.id) {\n                    return {\n                        ...post,\n                        title: action.data.newTitle,\n                        post: action.data.newPost,\n                        editing: !post.editing\n                    }\n                } else return post\n            })\n        default: \n            return state\n    }\n}\n\n\nexport default postReducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider  } from \"react-redux\";\nimport {createStore}  from 'redux'\nimport postReducer from './reducers/postReducer'\nconst store = createStore(postReducer)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}